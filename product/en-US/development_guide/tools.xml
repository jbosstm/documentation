<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../product_documentation.ent">
%BOOK_ENTITIES;
]>
<section>
    <title>Tools</title>
    <para>
        This chapter describes the various tools for managing transactions.
    </para>

    <section>
        <title>ObjectStore command-line browsers and editors</title>
        <para>
            There are currently three command-line editors for manipulating the ObjectStore. These tools are used to
            manipulate the lists of heuristic participants maintained by a transaction log. They allow a heuristic
            participant to be moved from that list back to the list of prepared participants so that transaction recovery
            may attempt to resolve them automatically.
        </para>


        <section>
            <title>Browse and Manage Transactions Using an Application Server</title>
            <para>
                The &APPSERVER;
                provides a command-line based Management CLI which supports the ability to browse and manipulate
                transaction records.
                This functionality is provided by the interaction between the Transaction Manager (TM) and the Management API of the
                application server.
                To start the CLI on a non-windows based OS type the following command in application server install directory:
            </para>
            <screen>./bin/jboss-cli.sh --connect controller=IP_ADDRESS</screen>
            <para>
                On Windows platforms use the jboss-cli.bat script
            </para>
            <para>
                The transaction manager stores information about each active transaction, and the participants involved
                in the transaction, in a persistent storage area
                called the
                <firstterm>object store</firstterm>
                . The Management API exposes the object store as a resource called the
                <code>log-store</code>
                .
                An API operation called
                <code>probe</code>
                reads the transaction logs and creates a node in the management model corresponding to each log.
                These nodes can be inspected using the CLI. Transaction logs are transient so these nodes quickly become out of date but
                you can call the
                <code>probe</code>
                command
                manually whenever you need to refresh the
                <code>log-store</code>
                .
            </para>
            <example id="refresh_log_store">
                <title>Refresh the Log Store</title>
                <para>
                    This command refreshes the Log Store for server groups which use the profile
                    <literal>default</literal>
                    in a managed domain.
                    For a standalone server, remove the
                    <literal>profile=default</literal>
                    from the command.
                </para>
                <screen>/subsystem=transactions/log-store=log-store/:probe</screen>
            </example>
            <example>
                <title>View All Prepared Transactions</title>
                <para>
                    To view all prepared transactions, first refresh the log store (see
                    <xref linkend="refresh_log_store" />
                    ), then run the following command,
                    which functions similarly to a filesystem
                    <command>ls</command>
                    command.
                </para>
                <screen>ls /subsystem=transactions/log-store=log-store/transactions</screen>
                <para>
                    Each transaction is shown, along with its unique identifier. Individual operations can be run
                    against an individual transaction
                    (see
                    <xref linkend="manage_transaction" />
                    ).
                </para>
            </example>
            <variablelist id="manage_transaction">
                <title>Manage a Transaction</title>
                <varlistentry>
                    <term>View a transaction's attributes.</term>
                    <listitem>
                        <para>
                            To view information about a transaction, such as its JNDI name, EIS product name and
                            version, or its status, use the
                            <code>:read-resource</code>
                            CLI command.
                        </para>
                        <screen>/subsystem=transactions/log-store=log-store/transactions=<replaceable>0\:ffff7f000001\:-b66efc2\:4f9e6f8f\:9</replaceable>:read-resource</screen>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>View the participants of a transaction.</term>
                    <listitem>
                        <para>
                            Each transaction log contains a child element called
                            <code>participants</code>
                            . Use the
                            <code>read-resource</code>
                            CLI command on this element
                            to see the participants of the transaction. Participants are
                            identified by their JNDI names (or some other unique identifier if the JNDI name is not available).
                        </para>
                        <screen>/subsystem=transactions/log-store=log-store/transactions=<replaceable>0\:ffff7f000001\:-b66efc2\:4f9e6f8f\:9</replaceable>/participants=<replaceable>java\:\/JmsXA</replaceable>:read-resource</screen>
                        <para>
                            The result may look similar to this:
                        </para>
                        <para>
                            <screen>
{
   "outcome" => "success",
   "result" => {
       "eis-product-name" => "HornetQ",
       "eis-product-version" => "2.0",
       "jndi-name" => "java:/JmsXA",
       "status" => "HEURISTIC_HAZARD",
       "type" => "/StateManager/AbstractRecord/XAResourceRecord"
   }
}
                        </screen>

                        </para>
                        <para>
                            The outcome status shown here is in a
                            <code>HEURISTIC_HAZARD</code>
                            state and is eligible for recovery. Refer to
                            <xref linkend="recover_transaction_participant" />
                            for more details.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Delete a transaction.</term>
                    <listitem>
                        <para>
                            Each transaction log supports a
                            <code>:delete</code>
                            operation, to delete the transaction log representing the transaction.
                        </para>
                        <screen>/subsystem=transactions/log-store=log-store/transactions=<replaceable>0\:ffff7f000001\:-b66efc2\:4f9e6f8f\:9</replaceable>:delete</screen>
                        <warning>
                            <para>
                                If failures occur, transaction logs may remain in the object store until crash recovery facilities have resolved
                                the transactions they represent.
                                Therefore, it is very important that the contents of the object store are not deleted inadvertently, as this will make it
                                impossible to
                                resolve in-doubt transactions. In addition, if multiple users share the same object store, they must understand that it
                                is not an exclusive resource,
                                and not delete transaction logs without careful consideration.
                            </para>
                        </warning>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Delete a transaction participant.</term>
                    <listitem>
                        <para>
Each transaction log participant supports a <code>:delete</code> operation which will delete the participant log that represents the participant:
                        </para>
                        <screen>
/subsystem=transactions/log-store=log-store/transactions=<replaceable>0\:ffff7f000001\:-b66efc2\:4f9e6f8f\:9</replaceable>/participants=<replaceable>0\:ffff7f000001\:-f30b80c\:58480e0a\:2c</replaceable>:delete
                        </screen>
                        <warning>
                            <para>
Normally you would leave participant log management to the transaction log that owns it or to the recovery system. However, this delete operation for participant logs is provided for those cases where you know it is safe to do so and, in the case of heuristically completed XA resources, you wish to trigger a forget call so that the XA resource vendors' logs are cleaned correctly. By default, if this forget call fails then the delete operation will still succeed. The system administrator may override this behaviour by setting a system property:
                                <screen>ObjectStoreEnvironmentBean.ignoreMBeanHeuristics</screen> to the value false.
                            </para>
                        </warning>
                    </listitem>
                </varlistentry>
                <varlistentry id="recover_transaction_participant">
                    <term>Recover a transaction participant.</term>
                    <listitem>
                        <para>
                            Each transaction participant log may support recovery via the
                            <code>:recover</code>
                            CLI command if it is in a heuristic state.
                        </para>
                        <itemizedlist>
                            <title>Recovery of Heuristic Transactions and Participants</title>
                            <listitem>
                                <para>
                                    If the transaction participant's status is
                                    <literal>HEURISTIC</literal> or
                                    <literal>HEURISTIC_HAZARD</literal> or
                                    <literal>HEURISTIC_MIXED</literal>
                                    then the recover operation changes the state to
                                    <literal>PREPARE</literal>
                                    and
                                    triggers a recovery attempt by replaying the
                                    <code>commit</code>
                                    operation.
                                    If successful, the participant is removed from the transaction log. You
                                    can verify this by re-running the
                                    <code>:probe</code>
                                    operation on
                                    the
                                    <code>log-store</code>
                                    and checking that the participant is no longer listed. If this is the last
                                    participant, the transaction is also
                                    deleted.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Refresh the status of a transaction which needs recovery.</term>
                    <listitem>
                        <para>
                            If a transaction needs recovery, you can use the
                            <code>:refresh</code>
                            CLI command to be sure it still requires recovery, before attempting the
                            recovery.
                        </para>
                        <screen>/subsystem=transactions/log-store=log-store/transactions=0\:ffff7f000001\:-b66efc2\:4f9e6f8f\:9:refresh</screen>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section>
            <title>Browse and Manage Transactions Using JMX</title>
            <para>
                Transaction logs may also be managed using
                <ulink url="https://docs.oracle.com/javase/7/docs/technotes/guides/jmx">JMX</ulink>. Each transaction
                log record is instrumented as an MBean. Any JMX client may be used to manage logs using this mechanism.
            </para>
            <para>
                The JMX MBean for the object store contains one method and one attribute. The
                <code>probe</code>
                operation scans the object store creating JMX MBeans for the various log records contained in the store.
                The default behaviour is to only create MBeans for particular record types. If there is a need to view
                everything in the store then set the
                <code>ExposeAllRecordsAsMBeans</code>
                attribute to <code>true</code>

                Note that transaction logs are transient so these beans
                quickly become out of date and will not be refreshed automatically so you must invoke the
                <code>probe</code>
                operation again to get the current up to date list of MBeans.
            </para>

            <para>
                MBeans can be queried using the standard JMX query mechanism. ObjectStore Object Names are in
                the format:
                <screen>domain:key-property-list</screen>
                where domain is <code>jboss.jta</code> and key-property-list is a comma separated list of key=value pairs.

                <table>
                    <title>Object Name Keys</title>
                    <tgroup cols="2">
                        <colspec colwidth="150px" />
                        <colspec colwidth="290px" />

                        <thead>
                            <row>
                                <entry>Name</entry>
                                <entry>Meaning</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>itype</entry>
                                <entry>
                                    <para>The transaction record type</para>
                                </entry>
                            </row>
                            <row>
                                <entry>uid</entry>
                                <entry>
                                    <para>The unique id of the transaction record</para>
                                </entry>
                            </row>
                            <row>
                                <entry>puid</entry>
                                <entry>
                                    <para>The unique id of a participant record</para>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>

                <example>
                    <title>Transaction record</title>
                    <para>jboss.jta:type=ObjectStore,itype=StateManager/BasicAction/TwoPhaseCoordinator/
                        AtomicAction,uid=0_ffff7f000001_-3a612f5d_53f63052_39</para>
                </example>
                <example>
                    <title>A participant record within a transaction</title>
                    <para>jboss.jta:type=ObjectStore,itype=StateManager/BasicAction/TwoPhaseCoordinator/
                        AtomicAction,uid=0_ffff7f000001_-3a612f5d_53f63052_39,puid=
                        0_ffff7f000001_-3a612f5d_53f63052_3c</para>
                </example>
            </para>

            <variablelist id="manage_transaction">
                <title>Manage a Transaction</title>
                <varlistentry>
                    <term>View a transaction's attributes.</term>
                    <listitem>
                        <para>
                            To view information about a transaction or a transaction participant, such as its JNDI name,
                            EIS product name and version, or its status, use a JMX client or alternatively use the JMX api:
                        </para>
                        <screen>
    // obtain connection to the MBean server
    MBeanServer mbs = ...

    // query all ObjectStore MBean instances
    ObjectName on = new ObjectName("jboss.jta:type=ObjectStore,*", null);
    Set&lt;ObjectInstance&gt; transactions = mbs.queryMBeans(on);

    // lookup the attribute names of an ObjectInstance
    MBeanInfo info = mbs.getMBeanInfo( oi.getObjectName() );
    MBeanAttributeInfo[] attributeArray = info.getAttributes();

    // find the values of the attributes of an ObjectInstance
    AttributeList attributes = mbs.getAttributes(
                            oi.getObjectName(), attributeNames);
                        </screen>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>View the participants of a transaction.</term>
                    <listitem>
                        <para>
                            A transaction log may contain one or more participants which can be viewed as MBeans
                            using a JMX client or programmatically as follows:
                            <screen>
    ObjectInstance transaction = ... //
    ObjectName on = transaction.getObjectName();
    String participantQuery =  on + ",puid=*";
    Set&lt;bjectInstance&gt; participants = mbs.queryMBeans(
                                new ObjectName(participantQuery), null)
                            </screen>
                        </para>
                        <para>
                            For example the attributes of an XAResource record might look similar to:
                        </para>
                        <para>
                            <screen>
       "eis-product-name" => "HornetQ",
       "eis-product-version" => "2.0",
       "jndi-name" => "java:/JmsXA",
       "status" => "HEURISTIC_HAZARD",
       "type" => "/StateManager/AbstractRecord/XAResourceRecord"
                        </screen>

                        </para>
                        <para>
                            The status attribute shown in this example is in a
                            <code>HEURISTIC_HAZARD</code>
                            state and is eligible for recovery. Refer to
                            <xref linkend="recover_transaction_participant_jmx" />
                            for more details.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Delete a transaction or transaction participant.</term>
                    <listitem>
                        <para>
                            MBeans for transaction logs and participants contain a <code>remove</code> operation. Invoke
                            this MBean operation to remove the record from the ObjectStore.
                        </para>
                        <warning>
                            <para>
                                If failures occur, transaction logs may remain in the object store until crash recovery facilities have resolved
                                the transactions they represent.
                                Therefore, it is very important that the contents of the object store are not deleted inadvertently, as this will make it
                                impossible to
                                resolve in-doubt transactions. In addition, if multiple users share the same object store, they must understand that it
                                is not an exclusive resource,
                            </para>
                            <para>
Normally you would leave participant log management to the transaction log that owns it or to the recovery system. However, this remove operation for participant logs is provided for those cases where you know it is safe to do so and, in the case of heuristically completed XA resources, you wish to trigger a forget call so that the XA resource vendors' logs are cleaned correctly. By default, if this forget call fails then the delete operation will still succeed. The system administrator may override this behaviour by setting a system property:
                                <screen>ObjectStoreEnvironmentBean.ignoreMBeanHeuristics</screen> to the value false.
                            </para>
                        </warning>
                    </listitem>
                </varlistentry>
                <varlistentry id="recover_transaction_participant_jmx">
                    <term>Recover a transaction.</term>
                    <listitem>
                        <para>
                            Transaction participants support recovery via the
                            <code>clearHeuristic</code>
                            operation.
                        </para>
                        <itemizedlist>
                            <title>Recovery of Heuristic Participants</title>
                            <listitem>
                                <para>
                                    If the transaction participant's status is
                                    <literal>HEURISTIC</literal> or
                                    <literal>HEURISTIC_HAZARD</literal> or
                                    <literal>HEURISTIC_MIXED</literal>
                                    then the clearHeuristic operation changes the state to
                                    <literal>PREPARED</literal>.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Subsequent runs of the recovery manager (periodic recovery) will try to replay the
                                    <code>commit</code>
                                    operation. If successful, the participant is removed from the transaction log. 
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    You
                                    can verify the transaction is completed by re-running the
                                    <code>probe</code>
                                    operation on the
                                    <code>ObjectStore</code>
                                    MBean. If this is the last participant, the transaction will have been also deleted.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section>
            <title>LogEditor</title>
            <para>
                The LogEditor tool is started by executing the following command:
            </para>
            <screen>
java -Dcom.arjuna.ats.arjuna.common.ObjectStoreEnvironmentBean.objectStoreDir="path to file based object store" com.arjuna.ats.arjuna.tools.log.LogBrowser
          </screen>
            <para>
                This command works with the file based object store. If you want
                to work with the Hornetq store instead then you need to specify
                a different property for the location of the log store and you
                also need to explicity provide the class name of the
                Hornetq Object Store:
            </para>
            <screen>
java -Dcom.arjuna.ats.internal.arjuna.objectstore.hornetq.HornetqJournalEnvironmentBean.storeDir="directory path" -Dcom.arjuna.ats.arjuna.common.ObjectStoreEnvironmentBean.objectStoreType="com.arjuna.ats.internal.arjuna.objectstore.hornetq.HornetqObjectStoreAdaptor"
          </screen>
            <para>
                The tool supports the following options that can be provided on the command-line:
            </para>
            <table>
                <title>LogEditor Options</title>
                <tgroup cols="2">
                    <colspec colwidth="150px" />
                    <colspec colwidth="290px" />

                    <thead>
                        <row>
                            <entry>Option</entry>
                            <entry>Description</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                -tx
                                <replaceable>id</replaceable>
                            </entry>
                            <entry>
                                <para>Specifies the transaction log to work on.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                -type
                                <replaceable>name</replaceable>
                            </entry>
                            <entry>
                                <para>The transaction type to work on.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>-dump</entry>
                            <entry>
                                <para>Print out the contents of the log identified by the other options.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                -forget
                                <replaceable>index</replaceable>
                            </entry>
                            <entry>
                                <para>Move the specified target from the heuristic list to the prepared list.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>-help</entry>
                            <entry>
                                <para>Print out the list of commands and options.</para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>

        <section>
            <title>LogBrowser</title>
            <para>
                The LogBrowser, invoked by calling
                <methodname>com.arjuna.ats.arjuna.tools.log.LogBrowser</methodname>
                , is
                similar to the LogEditor, but allows multiple log instances to be manipulated. It presents a shell-like
                interface, with the following options:
            </para>

            <table>
                <title>LogBrowserOptions</title>
                <tgroup cols="2">
                    <colspec colwidth="150px" />
                    <colspec colwidth="290px" />

                    <thead>
                        <row>
                            <entry>Option</entry>
                            <entry>Description</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                ls [
                                <replaceable>type</replaceable>
                                ]
                            </entry>
                            <entry>
                                <para>List the logs for the specified type. If no type is specified, the editor must
                                    already be
                                    attached to the transaction type.
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                select [
                                <replaceable>type</replaceable>
                                ]
                            </entry>
                            <entry>
                                <para>Browse a specific transaction type. If already attached to a transaction type, you
                                    are
                                    detached from that type first.
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                attach
                                <replaceable>log</replaceable>
                            </entry>
                            <entry>
                                <para>Attach the console to the specified transaction log. If you are attached to
                                    another log,
                                    the command will fail.
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>detach</entry>
                            <entry>
                                <para>Detach the console from the current log.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                forget
                                <replaceable>pid</replaceable>
                            </entry>
                            <entry>
                                <para>
                                    Move the specified heuristic participant back to the
                                    <systemitem>prepared</systemitem>
                                    list. The console must be attached.
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                delete
                                <replaceable>pid</replaceable>
                            </entry>
                            <entry>
                                <para>Delete the specified heuristic participant. The console must be attached.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>types</entry>
                            <entry>
                                <para>List the supported transaction types.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>quit</entry>
                            <entry>
                                <para>Exit the console tool.</para>
                            </entry>
                        </row>
                        <row>
                            <entry>help</entry>
                            <entry>
                                <para>Print out the supported commands.</para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
    </section>

    <section>
        <title>GUI Based Tools</title>
        <section>
            <title>Embedded Console</title>
            <para>
                Transaction management is integrated into the &APPSERVER;.
            </para>
        </section>
        <section>
            <title>Performance Graphing</title>
            <para>
                There is a transaction statistics graphing tool which can run standalone or inside a
                jconsole tab (jconsole is a tool for managing JVMs and is distributed with the reference JDK):
            </para>

            <para>
                The tool depends on the JFree graphing library. Download and unpack orson from
                http://www.jfree.org/orson.
                Set the env variable ORSON_HOME to the directory where you plan to unpack the downloaded zip.
                If you intend to use the tool with jconsole you will also need to put the JDK tools and
                jconsole jars on the classpath:
            </para>

            <screen>
export CLASSPATH="$JDK_HOME/lib/tools.jar:$JDK_HOME/lib/jconsole.jar:$ORSON_HOME/orson-0.5.0.jar:$ORSON_HOME/lib/jfreechart-1.0.6.jar:$ORSON_HOME/lib/jcommon-1.0.10.jar:$INSTALL_ROOT/lib/narayana-jta.jar>"
        </screen>

            <section>
                <title>Standalone Usage</title>

                <screen>
java com.arjuna.ats.arjuna.tools.stats.TxPerfGraph
        </screen>

                <para>
                    (note that standalone usage does not require the JDK tools and jconsole jars)
                </para>
            </section>
            <section>
                <title>Usage with jconsole</title>

                <screen>
jconsole -J-Djava.class.path="$CLASSPATH" -pluginpath $INSTALL_ROOT/lib/narayana-jta.jar
        </screen>
                <para>
                    This command will launch the jconsole GUI in which there will be an
                    extra tab for displaying transaction performance statistics.
                </para>
            </section>
        </section>
    </section>

    <section>
        <title>View Transaction Statistics using an Application Server</title>
        <para>
            If you are using the Transaction Manager (TM) inside the &APPSERVER;
            and if the TM statistics are enabled, then
            you can view statistics about the TM and transaction subsystem using
            tools provide by the application server.
        </para>
        <para>
            You can view statistics either via the web-based Management Console or the command-line Management CLI. In
            the web-based Management Console, Transaction statistics are available via
            <menuchoice>
                <guimenu>Runtime</guimenu>
                <guimenuitem>Subsystem Metrics</guimenuitem>
                <guimenuitem>Transactions</guimenuitem>
            </menuchoice>
            . Transaction statistics are available for each server in a managed domain, as well. You can specify the
            server in the
            <guilabel>Server</guilabel>
            selection box at the top left.
        </para>
        <para>
            The following table shows each available statistic, its description, and the CLI command to view the statistic.
        </para>
        <table>
            <title>Transaction Subsystem Statistics</title>
            <tgroup cols="3">
                <thead>
                    <row>
                        <entry>
                            Statistic
                        </entry>
                        <entry>
                            Description
                        </entry>
                        <entry>
                            CLI Command
                        </entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            Total
                        </entry>
                        <entry>
                            <para>
                                The total number of transactions processed by the TM on this server.
                            </para>
                        </entry>
                        <entry>
                            <screen>/subsystem=transactions/:read-attribute(name=number-of-transactions,include-defaults=true)</screen>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            Committed
                        </entry>
                        <entry>
                            <para>
                                The number of committed transactions processed by the TM on this server.
                            </para>
                        </entry>
                        <entry>
                            <screen>/subsystem=transactions/:read-attribute(name=number-of-committed-transactions,include-defaults=true)</screen>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            Aborted
                        </entry>
                        <entry>
                            <para>
                                The number of aborted transactions processed by the TM on this server.
                            </para>
                        </entry>
                        <entry>
                            <screen>/subsystem=transactions/:read-attribute(name=number-of-aborted-transactions,include-defaults=true)</screen>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            Timed Out
                        </entry>
                        <entry>
                            <para>
                                The number of timed out transactions processed by the TM on this server.
                            </para>
                        </entry>
                        <entry>
                            <screen>/subsystem=transactions/:read-attribute(name=number-of-timed-out-transactions,include-defaults=true)</screen>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            Heuristics
                        </entry>
                        <entry>
                            <para>
                                Not available in the Management Console. Number of transactions in a heuristic state.
                            </para>
                        </entry>
                        <entry>
                            <screen>/subsystem=transactions/:read-attribute(name=number-of-heuristics,include-defaults=true)</screen>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            In-Flight Transactions
                        </entry>
                        <entry>
                            <para>
                                Not available in the Management Console. Number of transactions which have begun but not yet terminated.
                            </para>
                        </entry>
                        <entry>
                            <screen>/subsystem=transactions/:read-attribute(name=number-of-inflight-transactions,include-defaults=true)</screen>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            Failure Origin - Applications
                        </entry>
                        <entry>
                            <para>
                                The number of failed transactions whose failure origin was an application.
                            </para>
                        </entry>
                        <entry>
                            <screen>/subsystem=transactions/:read-attribute(name=number-of-application-rollbacks,include-defaults=true)</screen>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            Failure Origin - Resources
                        </entry>
                        <entry>
                            <para>
                                The number of failed transactions whose failure origin was a resource.
                            </para>
                        </entry>
                        <entry>
                            <screen>/subsystem=transactions/:read-attribute(name=number-of-resource-rollbacks,include-defaults=true)</screen>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </section>
</section>
