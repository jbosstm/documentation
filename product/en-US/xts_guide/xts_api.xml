<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../product_documentation.ent">
%BOOK_ENTITIES;
]>
<section id="sec-xts-api">

    <title>The XTS API</title>

    <indexterm>
        <primary>participants</primary>
    </indexterm>
    <indexterm>
        <primary>implementation</primary>
    </indexterm>
    <indexterm>
        <primary>deployment</primary>
    </indexterm>
    <indexterm>
        <primry>Durable2PCParticipant</primry>
    </indexterm>
    <indexterm>
        <primry>Volatile2PCParticipant</primry>
    </indexterm>
    <indexterm>
        <primry>Vote</primry>
    </indexterm>
    <indexterm>
        <primary>TXContext</primary>
    </indexterm>
    <indexterm>
        <primary>UserTransaction</primary>
    </indexterm>
    <indexterm>
        <primary>UserTransactionFactory</primary>
    </indexterm>
    <indexterm>
        <primary>TransactionManager</primary>
    </indexterm>
    <indexterm>
        <primary>TransactionManagerFactory</primary>
    </indexterm>
    <indexterm>
        <primary>WSTXFeature</primary>
    </indexterm>
    <indexterm>
        <primary>JTAOverWSATFeature</primary>
    </indexterm>
    <indexterm>
        <primary>BusinessAgreementWithParticipantCompletionParticipant</primary>
    </indexterm>
    <indexterm>
        <primary>BusinessAgreementWithCoordinatorCompletionParticipant</primary>
    </indexterm>
    <indexterm>
        <primary>BAParticipantManager</primary>
    </indexterm>
    <indexterm>
        <primary>UserBusinessActivity</primary>
    </indexterm>
    <indexterm>
        <primary>UserBusinessActivityFactory</primary>
    </indexterm>
    <indexterm>
        <primary>BusinessActivityManager</primary>
    </indexterm>
    <indexterm>
        <primary>BusinessActivityManagerFactory</primary>
    </indexterm>


    <para>
        This chapter discusses the XTS API. You can use this information to write client and server applications which
        consume transactional Web Services and coordinate back-end systems.
    </para>

    <section>
        <title>Participants</title>

        <section>
            <title>Overview</title>
            <para>
                The
                <firstterm>participant</firstterm>
                is the entity that performs the work pertaining to transaction management
                on behalf of the business services involved in an application. The Web service (in the example code, a theater
                booking system) contains some business logic to reserve a seat and inquire about availability, but it needs to be
                supported by something that maintains information in a durable manner. Typically this is a database, but it could
                be a file system, NVRAM, or other storage mechanism.
            </para>
            <para>
                Although the service may talk to the back-end database directly, it cannot commit or undo any changes,
                since
                committing and rolling back are ultimately under the control of a transaction. For the transaction to exercise
                this control, it must communicate with the database. In XTS, participant does this communication, as shown in
                <xref linkend="fig-participant-backend-control" />
                .
            </para>
            <figure id="fig-participant-backend-control">
                <title>Transactions, Participants, and Back-End Transaction Control</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/xts-guide-fig-participant-backend-control.png" format="PNG" />
                    </imageobject>
                </mediaobject>
            </figure>

            <section>
                <title>Atomic Transaction</title>
                <warning>
                    <title>Warning!</title>
                    <para>
                        This section is relevant for WS-AT applications only if Raw XTS API is used.
                    </para>
                </warning>
                <para>
                    All Atomic Transaction participants are instances of the
                    <xref linkend="ref-Durable2PCParticipant" />
                    or
                    <xref linkend="ref-Volatile2PCParticipant" />
                    .
                </para>
            </section>

            <section>
                <title>Business Activity</title>
                <para>
                    All Business Activity participants are instances one or the other of the interfaces described in
                    <xref linkend="ref-BusinessAgreementWithParticipantCompletion" />
                    or
                    <xref linkend="ref-BusinessAgreementWithCoordinatorCompletion" />
                    interface.
                </para>
            </section>
        </section>

        <section>
            <title>Participant Creation and Deployment</title>

            <para>
                The participant provides the plumbing that drives the transactional aspects of the service. This section discusses
                the specifics of Participant programming and usage.
            </para>

            <section>
                <title>Implementing Participants</title>
                <para>
                    Implementing a participant is a relatively straightforward task. However, depending on the
                    complexity of the
                    transactional infrastructure that the participant needs to manage, the task can vary greatly in complexity and
                    scope. Your implementation needs to implement one of the interfaces found under
                    <package>com.arjuna.wst</package>
                    .
                </para>
            </section>

            <section>
                <title>Deploying Participants</title>
                <para>
                    Transactional web services and transactional clients are regular Jakarta EE applications and can be deployed into
                    the application server in the same way as any other Jakarta EE application. The XTS Subsystem exports all the client and
                    web service API
                    classes needed to manage transactions and enroll and manage participant web services. It provides
                    implementations of all the WS-C and WS-T coordination services, not just the coordinator services. In
                    particular, it exposes the client and web service participant endpoints which are needed to receive incoming
                    messages originating from the coordinator.
                </para>
                <para>
                    Normally, a transactional application client and the transaction web service it invokes will be deployed in
                    different application servers. As long as XTS is enabled on each of these containers it will
                    transparently route coordination messages from clients or web services to their coordinator and vice versa. When
                    the client begins a transaction by default it creates a context using the coordination services in its local
                    container. The context holds a reference to the local Registration Service which means that any web
                    services
                    enlisted in the transaction enrol with the coordination services in the same container.
                </para>
                <para>
                    The coordinator does not need to reside in the same container as the client application. By configuring the
                    client deployment appropriately it is possible to use the coordinator services co-located with one of the web
                    services or even to use services deployed in a separate, dedicated container. See Chapter 8 Stand-Alone
                    Coordination for details of how to configure a coordinator located in a different container to the client.
                </para>
                <warning>
                    <para>
                        In previous releases, the XTS and Transaction Manager
                        <filename>.jar</filename>
                        ,
                        <filename>.war</filename>
                        and configuration files needed to be bundled with the
                        application. This deployment method is no longer supported in the &APPSERVER;
                        as XTS is pre-installed as a
                        SubSystem.
                    </para>
                </warning>
            </section>
        </section>
    </section>

    <section>
        <title>API for the Atomic Transaction Protocol</title>

        <section id="ref-Durable2PCParticipant">
            <title>Durable2PCParticipant</title>
            <para>
                All participants which support Durable2PC protocol have to implement
                <interfacename>com.arjuna.wst.Durable2PCParticipant</interfacename>
                interface.
            </para>
            <variablelist>
                <title>Durable2PCParticipant Methods</title>

                <varlistentry>
                    <term>prepare</term>
                    <listitem>
                        <para>
                            The participant should perform any work necessary, so that it can either commit or roll back the work
                            performed by the Web service under the scope of the transaction. The implementation is free to do
                            whatever it needs to in order to fulfill the implicit contract between it and the coordinator.
                        </para>
                        <para>
                            The participant indicates whether it can
                            <systemitem>prepare</systemitem>
                            by returning an instance of
                            <xref linkend="ref-Vote" />
                            .
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>commit</term>
                    <listitem>
                        <para>
                            The participant should make its work permanent. How it accomplishes this depends upon its
                            implementation. For instance, in the theater example, the reservation of the ticket is
                            committed. If
                            commit processing cannot complete, the participant should throw a
                            <systemitem>SystemException</systemitem>
                            error, potentially leading to a heuristic outcome for the
                            transaction.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>rollback</term>
                    <listitem>
                        <para>
                            The participant should undo its work. If rollback processing cannot complete, the
                            participant should
                            throw a
                            <systemitem>SystemException</systemitem>
                            error, potentially leading to a heuristic outcome for
                            the transaction.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>unknown</term>
                    <listitem>
                        <para>
                            This method has been deprecated and is slated to be removed from XTS in the future.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>error</term>
                    <listitem>
                        <para>
                            In rare cases when recovering from a system crash, it may be impossible to complete or roll
                            back a
                            previously prepared participant, causing the
                            <methodname>error</methodname>
                            operation to be invoked.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="ref-Volatile2PCParticipant">
            <title>Volatile2PCParticipant</title>
            <para>
                All participants which support Volatile2PC protocol have to implement
                <interfacename>com.arjuna.wst.Volatile2PCParticipant</interfacename>
                interface.
            </para>
            <variablelist>
                <title>Volatile2PCParticipant Methods</title>

                <varlistentry>
                    <term>
                        <methodname>prepare</methodname>
                    </term>
                    <listitem>
                        <para>
                            The participant should perform any work necessary to flush any volatile data created by the Web service
                            under the scope of the transaction, to the system store. The implementation is free to do whatever it
                            needs to in order to fulfill the implicit contract between it and the coordinator.
                        </para>
                        <para>
                            The participant indicates whether it can
                            <systemitem>prepare</systemitem>
                            by returning an instance of
                            <xref linkend="ref-Vote" />
                            .
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>commit</term>
                    <listitem>
                        <para>
                            The participant should perform any cleanup activities required, in response to a successful
                            transaction
                            commit. These cleanup activities depend upon its implementation. For instance, it may flush cached
                            backup copies of data modified during the transaction. In the unlikely event that commit processing
                            cannot complete, the participant should throw a
                            <systemitem>SystemException</systemitem>
                            error. This
                            will not affect the outcome of the transaction but will cause an error to be logged. This method may not
                            be called if a crash occurs during commit processing.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>rollback</term>
                    <listitem>
                        <para>
                            The participant should perform any cleanup activities required, in response to a transaction
                            abort. In
                            the unlikely event that rollback processing cannot complete, the participant should throw a
                            <systemitem>SystemException</systemitem>
                            error. This will not affect the outcome of the transaction but
                            will cause an error to be logged. This method may not be called if a crash occurs during commit
                            processing.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>unknown</term>
                    <listitem>
                        <para>
                            This method is deprecated and will be removed in a future release of XTS.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>error</term>
                    <listitem>
                        <para>
                            This method should never be called, since volatile participants are not involved in recovery processing.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="ref-Vote">
            <title>Vote</title>
            <para>
                During the two-phase commit protocol, a participant is asked to vote on whether it can prepare to
                confirm the work
                that it controls. It must return an instance of one of the subtypes of
                <interfacename>com.arjuna.wst.Vote</interfacename>
                .
            </para>
            <variablelist>
                <title>
                    Subclasses of
                    <interfacename>com.arjuna.wst.Vote</interfacename>
                </title>

                <varlistentry>
                    <term>Prepared</term>
                    <listitem>
                        <para>
                            Indicates that the participant can prepare if the coordinator requests it. Nothing has been committed,
                            because the participant does not know the final outcome of the transaction.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>Aborted</term>
                    <listitem>
                        <para>
                            The participant cannot prepare, and has rolled back. The participant should not expect to get a second phase
                            message.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>ReadOnly</term>
                    <listitem>
                        <para>
                            The participant has not made any changes to state, and it does not need to know the final outcome of the
                            transaction. Essentially the participant is resigning from the transaction.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <example>
                <title>
                    Example Implementation of 2PC Participant's
                    <methodname>prepare</methodname>
                    method
                </title>
                <programlisting language="Java" role="JAVA">
          <xi:include href="extras/example-prepare-method.java" xmlns:xi="http://www.w3.org/2001/XInclude"
                    parse="text" />
        </programlisting>
            </example>
        </section>

        <section>
            <title>TXContext</title>
            <para>
                <package>com.arjuna.mw.wst.TxContext</package>
                is an opaque representation of a transaction context. It returns one
                of two possible values, as listed below.
            </para>
            <variablelist id="TxContext-values">
                <title>TxContext Return Values</title>
                <varlistentry>
                    <term>valid</term>
                    <listitem>
                        <para>
                            Indicates whether the contents are valid.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>equals</term>
                    <listitem>
                        <para>
                            Can be used to compare two instances for equality.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>

        </section>

        <section id="ref-UserTransaction">
            <title>UserTransaction</title>
            <para>
                <classname>com.arjuna.mw.wst11.UserTransaction</classname>
                is the class that clients typically employ. Before a
                client can begin a new atomic transaction, it must first obtain a
                <classname>UserTransaction</classname>
                from the
                <classname>UserTransactionFactory</classname>
                . This class isolates the user from the underlying protocol-specific
                aspects of the XTS implementation. A
                <classname>UserTransaction</classname>
                does not represent a specific
                transaction. Instead, it provides access to an implicit per-thread transaction context, similar to the
                <classname>UserTransaction</classname>
                in the JTA specification. All of the
                <classname>UserTransaction</classname>
                methods implicitly act on the current thread of control.
            </para>
            <variablelist>
                <title>
                    <classname>UserTransaction</classname>
                    Methods
                </title>
                <varlistentry>
                    <term>begin</term>
                    <listitem>
                        <para>
                            Used to begin a new transaction and associate it with the invoking thread.
                        </para>
                        <variablelist>
                            <title>Parameters</title>
                            <varlistentry>
                                <term>timeout</term>
                                <listitem>

                                    <para>
                                        This optional parameter, measured in milliseconds, specifies a time interval after which the newly created
                                        transaction may be automatically rolled back by the coordinator
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                        <variablelist>
                            <title>Exceptions</title>
                            <varlistentry>
                                <term>
                                    <systemitem>WrongStateException</systemitem>
                                </term>
                                <listitem>
                                    <para>
                                        A transaction is already associated with the thread.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>commit</term>
                    <listitem>
                        <para>
                            <!-- Commits the transaction. The <methodname>commit</methodname> method executes the Volatile2PC 
                                and Durable2PC protocols before returning. When complete, the <methodname>commit</methodname> method disassociates the transaction 
                                from the current thread, leaving it unassociated with any transactions. -->
                            Volatile2PC and Durable2PC participants enrolled in the transaction
                            are requested first to prepare and then to commit their changes. If
                            any of the participants fails to prepare in the first phase then all
                            other participants are requested to abort.
                        </para>
                        <variablelist>
                            <title>Exceptions</title>
                            <varlistentry>
                                <term>
                                    <systemitem>UnknownTransactionException</systemitem>
                                </term>
                                <listitem>
                                    <para>
                                        No transaction is associated with the invoking thread.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>
                                    <methodname>TransactionRolledBackException</methodname>
                                </term>
                                <listitem>
                                    <para>
                                        <!-- The transaction rolled back, due to another participant. -->
                                        The transaction was rolled back either because of a timeout or
                                        because a participant was unable to commit.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>rollback</term>
                    <listitem>
                        <para>
                            Terminates the transaction. Upon completion, the
                            <methodname>rollback</methodname>
                            method disassociates the
                            transaction from the current leaving it unassociated with any transactions.
                        </para>
                        <variablelist>
                            <title>Exceptions</title>
                            <varlistentry>
                                <term>
                                    <systemitem>UnknownTransactionException</systemitem>
                                </term>
                                <listitem>
                                    <para>
                                        No transaction is associated with the invoking thread.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section>
            <title>UserTransactionFactory</title>
            <para>
                Call the
                <methodname>getUserTransaction</methodname>
                method to obtain a
                <xref linkend="ref-UserTransaction" />
                instance from a
                <classname>UserTransactionFactory</classname>
                .
            </para>
        </section>

        <section id="ref-TransactionManager">
            <title>TransactionManager</title>
            <para>
                Defines the interaction between a transactional web service and the underlying transaction service
                implementation. A
                <classname>TransactionManager</classname>
                does not represent a specific transaction. Instead, it provides access to
                an implicit per-thread transaction context.
            </para>
            <variablelist>
                <title>Methods</title>
                <varlistentry>
                    <term>
                        <methodname>currentTransaction</methodname>
                    </term>
                    <listitem>
                        <para>
                            Returns a
                            <systemitem>TxContext</systemitem>
                            for the current transaction, or null if there is no context. Use
                            the
                            <methodname>currentTransaction</methodname>
                            method to determine whether a web service has been invoked from
                            within an existing transaction. You can also use the returned value to enable multiple threads to execute
                            within the scope of the same transaction. Calling the
                            <methodname>currentTransaction</methodname>
                            method does
                            not disassociate the current thread from the transaction.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <methodname>suspend</methodname>
                    </term>
                    <listitem>
                        <para>
                            Dissociates a thread from any transaction. This enables a thread to do work that is not associated with a
                            specific transaction.
                        </para>
                        <para>
                            The
                            <methodname>suspend</methodname>
                            method returns a
                            <systemitem>TxContext</systemitem>
                            instance, which is a handle on the transaction.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <methodname>resume</methodname>
                    </term>
                    <listitem>
                        <para>
                            Associates or re-associates a thread with a transaction, using its
                            <systemitem>TxContext</systemitem>
                            . Prior to
                            association or re-association, the thread is disassociated from any transaction with which it may be currently
                            associated. If the
                            <systemitem>TxContext</systemitem>
                            is null, then the thread is associated with no
                            transaction. In this way, the result is the same as if the
                            <methodname>suspend</methodname>
                            method were used
                            instead.
                        </para>
                        <variablelist>
                            <title>Parameters</title>
                            <varlistentry>
                                <term>txContext</term>
                                <listitem>
                                    <para>
                                        A TxContext instance as return by
                                        <methodname>suspend</methodname>
                                        , identifying the transaction to be resumed.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                        <variablelist>
                            <title>Exceptions</title>
                            <varlistentry>
                                <term>
                                    <systemitem>UnknownTransactionException</systemitem>
                                </term>
                                <listitem>
                                    <para>
                                        The transaction referred to by the
                                        <systemitem>TxContext</systemitem>
                                        is invalid in the scope of the invoking
                                        thread.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <!-- <varlistentry> <term><systemitem>WrongStateException</systemitem></term> <listitem> <para> 
                                The transaction is not in a state that allows participants to be enrolled. For instance, it may be in the process of terminating. 
                                </para> </listitem> </varlistentry> -->
                        </variablelist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <varname>enlistForVolitaleTwoPhase</varname>
                    </term>
                    <listitem>
                        <para>
                            Enroll the specified participant with the current transaction, causing it to participate in the Volatile2PC
                            protocol. You must pass a unique identifier for the participant.
                        </para>
                        <variablelist>
                            <title>Parameters</title>
                            <varlistentry>
                                <term>participant</term>
                                <listitem>
                                    <para>
                                        An implementation of interface Volatile2PCParticipant whose prepare, commit and abort methods are called when
                                        the corresponding coordinator message is received.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>id</term>
                                <listitem>
                                    <para>
                                        A unique identifier for the participant. The value of this String should differ for each enlisted
                                        participant. It should also be possible for a given identifier to determine that the participant belongs to
                                        the enlisting web service rather than some other web service deployed to the same container.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                        <variablelist>
                            <title>Exceptions</title>
                            <varlistentry>
                                <term>UnknownTransactionException</term>
                                <listitem>
                                    <para>
                                        No transaction is associated with the invoking thread.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>
                                    <systemitem>WrongStateException</systemitem>
                                </term>
                                <listitem>
                                    <para>
                                        The transaction is not in a state that allows participants to be enrolled. For instance, it may be in the
                                        process of terminating.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <varname>enlistForDurableTwoPhase</varname>
                    </term>
                    <listitem>
                        <para>
                            Enroll the specified participant with the current transaction, causing it to participate in the Durable2PC
                            protocol. You must pass a unique identifier for the participant.
                        </para>
                        <variablelist>
                            <title>Exceptions</title>
                            <varlistentry>
                                <term>UnknownTransactionException</term>
                                <listitem>
                                    <para>
                                        No transaction is associated with the invoking thread.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>
                                    <systemitem>WrongStateException</systemitem>
                                </term>
                                <listitem>
                                    <para>
                                        The transaction is not in a state that allows participants to be enrolled. For instance, it may be in the
                                        process of terminating.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section>
            <title>TransactionManagerFactory</title>
            <para>
                Use the
                <methodname>getTransactionManager</methodname>
                method to obtain a
                <xref linkend="ref-TransactionManager" />
                from a
                <classname>TransactionManagerFactory</classname>
                .
            </para>
        </section>

        <section id="ref-WSTXFeature">
            <title>WSTXFeature</title>
            <para>
                Use this JAX-WS feature to enable or disable WS-AT context propagation for specific port. Pass an instance of this
                feature when creating web service port.
            </para>

            <variablelist>
                <title>Methods</title>

                <varlistentry>
                    <term>
                        <varname>WSTXFeature</varname>
                    </term>
                    <listitem>
                        <para>
                            <classname>WSTXFeature</classname>
                            created with default constructor will enable WS-AT context propagation.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>
                        <varname>WSTXFeature</varname>
                    </term>
                    <listitem>
                        <para>
                            Parametrised constructor will either enabled or disable WS-AT context propagation.
                        </para>

                        <variablelist>
                            <title>Parameters</title>
                            <varlistentry>
                                <term>enabled</term>
                                <listitem>
                                    <para>
                                        Boolean value saying to either enable or disable WS-AT context propagation.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="ref-JTAOverWSATFeature">
            <title>JTAOverWSATFeature</title>
            <para>
                Use this JAX-WS feature to enable or disable JTA context propagation for specific port. Pass an instance of this
                feature when creating web service port.
            </para>

            <variablelist>
                <title>Methods</title>

                <varlistentry>
                    <term>
                        <varname>JTAOverWSATFeature</varname>
                    </term>
                    <listitem>
                        <para>
                            <classname>JTAOverWSATFeature</classname>
                            created with default constructor will enable JTA context propagation.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>
                        <varname>JTAOverWSATFeature</varname>
                    </term>
                    <listitem>
                        <para>
                            Parametrised constructor will either enabled or disable JTA context propagation.
                        </para>

                        <variablelist>
                            <title>Parameters</title>
                            <varlistentry>
                                <term>enabled</term>
                                <listitem>
                                    <para>
                                        Boolean value saying to either enable or disable JTA context propagation.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
    </section>

    <section>

        <title>API for the Business Activity Protocol</title>

        <section>
            <title>Compatibility</title>
            <para>
                Previous implementations of XTS locate the Business Activity Protocol classes in the
                <package>com.arjuna.mw.wst</package>
                package. In the current implementation, these classes are located in the
                <package>com.arjuna.mw.wst11</package>
                package.
            </para>
        </section>

        <section id="ref-BusinessAgreementWithParticipantCompletion">
            <title>BusinessAgreementWithParticipantCompletionParticipant</title>
            <para>
                Participant which support business agreement with participant completion protocol have to implement
                <interfacename>com.arjuna.wst.BusinessAgreementWithParticipantCompletionParticipant</interfacename>
                interface.
            </para>
            <variablelist>
                <title>BusinessAgreementWithParticipantCompletion Methods</title>

                <varlistentry>
                    <term>close</term>
                    <listitem>
                        <para>
                            The transaction has completed successfully. The participant has previously informed the coordinator that
                            it was ready to complete.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>cancel</term>
                    <listitem>
                        <para>
                            The transaction has canceled, and the participant should undo any work. The participant cannot have
                            informed the coordinator that it has completed.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>compensate</term>
                    <listitem>
                        <para>
                            The transaction has canceled. The participant previously informed the coordinator that it
                            had finished
                            work but could compensate later if required, and it is now requested to do so. If compensation cannot be
                            performed, the participant should throw a
                            <systemitem>FaultedException</systemitem>
                            error, potentially
                            leading to a heuristic outcome for the transaction. If compensation processing cannot complete because
                            of a transient condition then the participant should throw a
                            <systemitem>SystemException</systemitem>
                            error, in which case the compensation action may be retried or the transaction may finish
                            with a
                            heuristic outcome.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>status</term>
                    <listitem>
                        <para>
                            Return the status of the participant.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>unknown</term>
                    <listitem>
                        <para>
                            This method is deprecated and will be removed a future XTS release.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>error</term>
                    <listitem>
                        <para>
                            In rare cases when recovering from a system crash, it may be impossible to compensate a
                            previously-completed participant. In such cases the
                            <methodname>error</methodname>
                            operation is invoked.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="ref-BusinessAgreementWithCoordinatorCompletion">
            <title>BusinessAgreementWithCoordinatorCompletion</title>
            <para>
                Participant which support business agreement with coordinator completion protocol have to implement
                <interfacename>com.arjuna.wst.BusinessAgreementWithCoordinatorCompletionParticipant</interfacename>
                interface.
            </para>
            <variablelist>
                <title>BusinessAgreementWithCoordinatorCompletion Methods</title>

                <varlistentry>
                    <term>close</term>
                    <listitem>
                        <para>
                            The transaction completed successfully. The participant previously informed the coordinator that it was
                            ready to complete.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>cancel</term>
                    <listitem>
                        <para>
                            The transaction canceled, and the participant should undo any work.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>compensate</term>
                    <listitem>
                        <para>
                            The transaction canceled. The participant previously informed the coordinator that it had
                            finished work
                            but could compensate later if required, and it is now requested to do so. In the unlikely event that
                            compensation cannot be performed the participant should throw a
                            <systemitem>FaultedException</systemitem>
                            error, potentially leading to a heuristic outcome for the
                            transaction. If compensation processing cannot complete because of a transient condition, the
                            participant should throw a
                            <systemitem>SystemException</systemitem>
                            error, in which case the
                            compensation action may be retried or the transaction may finish with a heuristic outcome.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>complete</term>
                    <listitem>
                        <para>
                            The coordinator is informing the participant all work it needs to do within the scope of this business
                            activity has been completed and that it should make permananent any provisional changes it has made.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>status</term>
                    <listitem>
                        <para>
                            Returns the status of the participant.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>unknown</term>
                    <listitem>
                        <para>
                            This method is deprecated and will be removed in a future release of XTS.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>error</term>
                    <listitem>
                        <para>
                            In rare cases when recovering from a system crash, it may be impossible to compensate a
                            previously
                            completed participant. In such cases, the
                            <methodname>error</methodname>
                            method is invoked.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section>
            <title>BAParticipantManager</title>
            <para>
                In order for the Business Activity protocol to work correctly, the participants must be able to autonomously
                notify the coordinator about changes in their status. Unlike the Atomic Transaction protocol, where all
                interactions between the coordinator and participants are instigated by the coordinator when the transaction
                terminates, the BAParticipantManager interaction pattern requires the participant to be able to talk to the
                coordinator at any time during the lifetime of the business activity.
            </para>
            <para>
                Whenever a participant is registered with a business activity, it receives a handle on the
                coordinator. This handle is an instance of interface
                <interfacename>com.arjuna.wst11.BAParticipantManager</interfacename>
                .
            </para>
            <variablelist>
                <title>BAParticipantManager Methods</title>
                <varlistentry>
                    <term>exit</term>
                    <listitem>
                        <para>
                            The participant uses the method
                            <methodname>exit</methodname>
                            to inform the coordinator that is has left
                            the activity. It will not be informed when and how the business activity terminates. This method may
                            only be invoked while the participant is in the
                            <systemitem>active</systemitem>
                            state (or the
                            <systemitem>completing</systemitem>
                            state, in the case of a participant registered for the
                            <systemitem>ParticipantCompletion</systemitem>
                            protocol). If it is called when the participant is in any
                            other state, a
                            <systemitem>WrongStateException</systemitem>
                            error is thrown. An
                            <methodname>exit</methodname>
                            does not stop the activity as a whole from subsequently being closed or
                            canceled/compensated, but only ensures that the exited participant is no longer involved in
                            completion,
                            close or compensation of the activity.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>completed</term>
                    <listitem>
                        <para>
                            The participant has completed its work, but wishes to continue in the business activity, so that it will
                            eventually be informed when, and how, the activity terminates. The participant may later be asked to
                            compensate for the work it has done or learn that the activity has been closed.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term>fault</term>
                    <listitem>
                        <para>
                            The participant encountered an error during normal activation and has done whatever it can
                            to compensate
                            the activity. The
                            <methodname>fault</methodname>
                            method places the business activity into a mandatory
                            <systemitem>cancel-only</systemitem>
                            mode. The faulted participant is no longer involved in completion,
                            close or compensation of the activity.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="ref-UserBusinessActivity">
            <title>UserBusinessActivity</title>
            <para>
                <classname>com.arjuna.wst11.UserBusinessActivity</classname>
                is the class that most clients employ. A client begins a
                new business activity by first obtaining a
                <classname>UserBusinessActivity</classname>
                from the
                <classname>UserBusinessActivityFactory</classname>
                . This class isolates them from the underlying protocol-specific
                aspects of the XTS implementation. A UserBusinessActivity does not represent a specific business activity. Instead,
                it provides access to an implicit per-thread activity. Therefore, all of the
                <classname>UserBusinessActivity</classname>
                methods implicitly act on the current thread of control.
            </para>
            <variablelist>
                <title>Methods</title>
                <varlistentry>
                    <term>
                        <methodname>begin</methodname>
                    </term>
                    <listitem>
                        <para>
                            Begins a new activity, associating it with the invoking thread.
                        </para>
                        <variablelist>
                            <title>Parameters</title>
                            <varlistentry>
                                <term>timeout</term>
                                <listitem>
                                    <para>
                                        The interval, in milliseconds, after which an activity times out. Optional.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                        <variablelist>
                            <title>Exceptions</title>
                            <varlistentry>
                                <term>
                                    <systemitem>WrongStateException</systemitem>
                                </term>
                                <listitem>
                                    <para>
                                        The thread is already associated with a business activity.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>

                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <methodname>close</methodname>
                    </term>
                    <listitem>
                        <!-- <para> Terminates the business activity. The <methodname>close</methodname> method executes 
                            the <systemitem>BusinessAgreementWithParticipantCompletion</systemitem> protocol and then returns, dissociating the business 
                            activity from the current thread, so that it is not associated with any activity. </para> -->
                        <para>
                            First, all Coordinator Completion participants enlisted in the activity are requested to complete the
                            activity. Next all participants, whether they enlisted for Coordinator or Participant Completion, are requested
                            to close the activity. If any of the Coordinator Completion participants fails to complete at the first stage
                            then all completed participants are asked to compensate the activity while any remaining uncompleted
                            participants are requested to cancel the activity.
                        </para>
                        <variablelist>
                            <title>Exceptions</title>
                            <varlistentry>
                                <term>UnknownTransactionException</term>
                                <listitem>
                                    <para>
                                        No activity is associated with the invoking thread.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>TransactionRolledBackException</term>
                                <listitem>
                                    <para>
                                        The activity has been cancelled because one of the Coordinator Completion participants failed to
                                        complete. This exception may also be thrown if one of the Participant Completion participants has not completed
                                        before the client calls close.
                                    </para>
                                    <!-- <para> The activity has canceled. </para> -->
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>cancel</term>
                    <listitem>
                        <!-- <para> Terminates the business activity. After the <methodname>cancel</methodname> method completes, 
                            </para> -->
                        <para>
                            Terminates the business activity. All Participant Completion participants enlisted in the activity which have
                            already completed are requested to compensate the activity. All uncompleted Participant Completion participants
                            and all Coordinator Completion participants are requested to cancel the activity.
                        </para>
                        <variablelist>
                            <title>Exceptions</title>
                            <varlistentry>
                                <term>
                                    <systemitem>UnknownTransactionException</systemitem>
                                </term>
                                <listitem>
                                    <para>
                                        No activity is associated with the invoking thread. Any participants that previous completed are directed to
                                        compensate their work.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
            </variablelist>
            <!-- <para> In some cases participants in a business activity may register for the <systemitem>BusinessAgreementWithCoordinatorCompletion</systemitem> 
                protocol. In this case, the coordinator needs to notify them that all the work that they need to do within the scope of a 
                business activity is complete. When the the client application has finished requesting work to be done by these participants, 
                it must call the <methodname>complete</methodname> method before attempting to call the <methodname>close</methodname> or 
                <methodname>cancel</methodname> methods. </para> -->
        </section>


        <section>
            <title>UserBusinessActivityFactory</title>
            <para>
                Use the
                <methodname>getUserBusinessActivity</methodname>
                method to obtain a
                <xref linkend="ref-UserBusinessActivity" />
                instance from a
                <classname>userBusinessActivityFactory</classname>
                .
            </para>
        </section>

        <section id="ref-BusinessActivityManager">
            <title>BusinessActivityManager</title>
            <para>
                <package>com.arjuna.mw.wst11.BusinessActivityManager</package>
                is the class that web services typically
                employ. Defines how a web service interacts with the underlying business activity service implementation. A
                <classname>BusinessActivityManager</classname>
                does not represent a specific activity. Instead, it provides access to
                an implicit per-thread activity.
            </para>
            <variablelist>
                <title>Methods</title>
                <varlistentry>
                    <term>
                        <methodname>currentTransaction</methodname>
                    </term>
                    <listitem>
                        <para>
                            Returns the
                            <systemitem>TxContext</systemitem>
                            for the current business activity, or
                            <literal>NULL</literal>
                            if
                            there is no
                            <systemitem>TxContext</systemitem>
                            . The returned value can be used to enable multiple threads to
                            execute within the scope of the same business activity. Calling the
                            <methodname>currenTransaction</methodname>
                            method does not dissociate the current thread from its activity.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <methodname>suspend</methodname>
                    </term>
                    <listitem>
                        <para>
                            Dissociates a thread from any current business activity, so that it can perform work not
                            associated with a
                            specific activity. The
                            <methodname>suspend</methodname>
                            method returns a
                            <systemitem>TxContext</systemitem>
                            instance, which is a handle on the activity. The thread is then no longer associated with
                            any activity.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <methodname>resume</methodname>
                    </term>
                    <listitem>
                        <para>
                            Associates or re-associates a thread with a business activity, using its
                            <systemitem>TxContext</systemitem>
                            . Before associating or re-associating the thread, it is disassociated from
                            any business activity with which it is currently associated. If the
                            <systemitem>TxContext</systemitem>
                            is
                            <literal>NULL</literal>
                            , the thread is disassociated with all business activities, as though the
                            <methodname>suspend</methodname>
                            method were called.
                        </para>
                        <variablelist>
                            <title>Parameters</title>
                            <varlistentry>
                                <term>txContext</term>
                                <listitem>
                                    <para>
                                        A TxContext instance as returned by
                                        <methodname>suspend</methodname>
                                        , identifying the transaction to be
                                        resumed.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>

                        <variablelist>
                            <title>Exceptions</title>
                            <varlistentry>
                                <term>
                                    <systemitem>UnknownTransactionException</systemitem>
                                </term>
                                <listitem>
                                    <para>
                                        The business activity to which the
                                        <systemitem>TxContext</systemitem>
                                        refers is invalid in the scope of the
                                        invoking thread.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <varname>enlistForBusinessAgreementWithParticipantCompletion</varname>
                    </term>
                    <listitem>
                        <para>
                            Enroll the specified participant with current business activity, causing it to participate
                            in the
                            <systemitem>BusinessAgreementWithParticipantCompletion</systemitem>
                            protocol. A unique identifier for the
                            participant is also required.
                        </para>
                        <para>
                            The return value is an instance of BAParticipantManager which can be used to notify the coordinator of changes
                            in the participant state. In particular, since the participant is enlisted for the Participant Completion
                            protcol it is expected to call the completed method of this returned instance when it has completed all the
                            work it expects to do in this activity and has made all its changes permanent. Alternatively, if the
                            participant does not need to perform any compensation actions should some other participant fail it can leave
                            the activity by calling the exit method of the returned BAParticipantManager instance.
                        </para>
                        <variablelist>
                            <title>Parameters</title>
                            <varlistentry>
                                <term>participant</term>
                                <listitem>
                                    <para>
                                        An implementation of interface
                                        <interfacename>BusinessAgreementWithParticipantCompletionParticipant
                                        </interfacename>
                                        whose
                                        <methodname>close</methodname>
                                        ,
                                        <methodname>cancel</methodname>
                                        , and
                                        <methodname>compensate</methodname>
                                        methods are called when the corresponding coordinator message is received.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>id</term>
                                <listitem>
                                    <para>
                                        A unique identifier for the participant. The value of this String should differ for each enlisted
                                        participant. It should also be possible for a given identifier to determine that the participant belongs to
                                        the enlisting web service rather than some other web service deployed to the same container.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                        <variablelist>
                            <title>Exceptions</title>
                            <varlistentry>
                                <term>UnknownTransactionException</term>
                                <listitem>
                                    <para>
                                        No transaction is associated with the invoking thread.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>WrongStateException</term>
                                <listitem>
                                    <para>
                                        The transaction is not in a state where new participants may be enrolled, such as when it is terminating.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <varname>enlistForBusinessAgreementWithCoordinatorCompletion</varname>
                    </term>
                    <listitem>
                        <para>
                            Enroll the specified participant with current activity, causing it to participate in the
                            <systemitem>BusinessAgreementWithCoordinatorCompletion</systemitem>
                            protocol. A unique identifier for the
                            participant is also required.
                        </para>
                        <para>
                            The return value is an instance of
                            <interfacename>BAParticipantManager</interfacename>
                            which can be used to
                            notify the coordinator of changes in the participant state. Note that in this case it is an error to call the
                            <methodname>completed</methodname>
                            method of this returned instance. With the Coordinator Completion protocol
                            the participant is expected to wait until its
                            <methodname>completed</methodname>
                            method is called before it
                            makes all its changes permanent. Alternatively, if the participant determiens that it has no changes to make,
                            it can leave the activity by calling the
                            <methodname>exit</methodname>
                            method of the returned
                            <interfacename>BAParticipantManager</interfacename>
                            instance.
                        </para>
                        <variablelist>
                            <title>Parameters</title>
                            <varlistentry>
                                <term>participant</term>
                                <listitem>
                                    <para>
                                        An implementation of interface BusinessAgreementWithCoordinatorCompletionParticipant whose completed, close,
                                        cancel and compensate methods are called when the corresponding coordinator
                                        message is received.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>id</term>
                                <listitem>
                                    <para>
                                        A unique identifier for the participant. The value of this String should differ for each enlisted
                                        participant. It should also be possible for a given identifier to determine that the participant belongs to
                                        the enlisting web service rather than some other web service deployed to the same container.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                        <variablelist>
                            <title>Exceptions</title>
                            <varlistentry>
                                <term>UnknownTransactionException</term>
                                <listitem>
                                    <para>
                                        No transaction is associated with the invoking thread.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>WrongStateException</term>
                                <listitem>
                                    <para>
                                        The transaction is not in a state where new participants may be enrolled, such as when it is terminating.
                                    </para>
                                </listitem>
                            </varlistentry>

                        </variablelist>

                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section>
            <title>BusinessActivityManagerFactory</title>
            <para>
                Use the
                <methodname>getBusinessActivityManager</methodname>
                method to obtain a
                <xref linkend="ref-BusinessActivityManager" />
                instance from a
                <classname>BusinessActivityManagerFactory</classname>
                .
            </para>
        </section>
    </section>

</section>

