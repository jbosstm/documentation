<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../project_documentation.ent">
%BOOK_ENTITIES;
]>
<section id="lra-examples">
    <title>Examples</title>

<section>
    <title>LRA Quickstart Examples</title>
    <para>
        There are some quickstarts with README.md files for using LRAs in the quickstart repository:
        <ulink url="https://github.com/jbosstm/quickstart/tree/master/rts/lra-examples"></ulink>
        and
        <ulink url="https://github.com/jbosstm/quickstart/tree/master/rts/lra"></ulink>
    </para>
</section>
<section>
    <title>Participating in Long Running Actions</title>
    <para>
        The following code snippet shows the basic steps for writing service methods
	(and associated participant resource) that will result in the registration
	of a participant in a new or an existing LRA.
    </para>

    <programlisting language="java" linenumbering="unnumbered">
@LRA(value = LRA.Type.REQUIRED, // if there is no incoming context a new one is created
     cancelOn = {
         Response.Status.INTERNAL_SERVER_ERROR // cancel on a 500 code
     },
     cancelOnFamily = {
         Response.Status.Family.CLIENT_ERROR // cancel on any 4xx code
     },
     end = false) // the LRA will continue to run when the method finishes
@Path("/book")
@POST
public Response bookTrip(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,
                         @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {
    if (parentLRA != null) { // is the context nested
          // code which is sensitive to executing with a nested context goes here
    }
    ...
}

@LRA(LRA.Type.MANDATORY, // requires an active context before method can be executed
     end = true) // end the LRA started by the bookTrip method
@Path("/confirm")
@PUT
public Booking confirmTrip(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,
                           @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,
                           Booking booking) throws BookingException {
    if (parentLRA != null) { // is the context nested
          // code which is sensitive to executing with a nested context goes here
    }
    // lookup data associated with the incoming LRA (lraId)
    ...
}

@Complete
@Path("/complete")
@PUT
public Response completeWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId)
{
    /*
     * Free up resources allocated in the context of the LRA identified by the
     * value in the injected JAX-RS header.
     *
     * Since there is no @Status method in this class, completeWork MUST be
     * idempotent and MUST return the status.
     */
    return Response.ok(ParticipantStatus.Completed.name()).build();
}

@Compensate
@Path("/compensate")
@PUT
public Response compensateWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId)
{
    /*
     * The LRA identified by the value in the injected JAX-RS header was
     * cancelled so the business logic should compensate for any actions
     * that have been performed while running in its context.
     *
     * Since there is no @Status method in this class, compensateWork MUST be
     * idempotent and MUST return the status
    */
    return Response.ok(ParticipantStatus.Compensated.name()).build();
}
    </programlisting>
</section>
</section>
