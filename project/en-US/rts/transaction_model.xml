<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../project_documentation.ent">
%BOOK_ENTITIES;
]>
<section id="_transaction_model">
    <title>Transaction Model</title>
    <para>
        The REST Atomic Transaction (RESTAT) model uses a traditional two-phase commit protocol with the
        following
        optimizations:
    </para>
    <itemizedlist>
        <listitem>
            <para>
                Presumed rollback: the transaction coordinator need not record information about the participants in
                stable storage until
                it decides to commit, i.e., until after the prepare phase has completed
                successfully. A definitive
                answer that a transaction does not exist can be used to infer that it rolled
                back.
            </para>
        </listitem>
        <listitem>
            <para>
                One-phase: if the coordinator discovers that only a single participant is registered then it may omit
                the prepare phase.
            </para>
        </listitem>
        <listitem>
            <para>
                Read-only: a participant that is responsible for a service that did not modify any transactional data
                during the course of
                the transaction can indicate to the coordinator during prepare that it is a
                read-only participant
                and the coordinator can omit it from the second phase of the commit protocol.
            </para>
        </listitem>
    </itemizedlist>
    <section id="_architecture">
        <title>Architecture</title>
        <para>
            The diagram below illustrates the various resources defined within the RESTAT protocol. We shall
            discuss
            each of these in the following sections.
        </para>
        <figure>
            <title>Architecture</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/rts-architecture.png" />
                </imageobject>
                <caption>
                    <phrase>Architecture image</phrase>
                </caption>
            </mediaobject>
        </figure>
        <para>These components are enumerated below and discussed in the following sections:</para>
        <itemizedlist>
            <listitem>
                <para>
                    Transaction Manager: this is a factory resource that is responsible for creating new transactions.
                    Once created, the
                    transaction manager has no further role to play in the life of the transaction.
                </para>
            </listitem>
            <listitem>
                <para>
                    Transaction Coordinator: this is a specific resource for the transaction. It drives the two-phase
                    commit protocol and manages
                    interactions with participants.
                </para>
            </listitem>
            <listitem>
                <para>
                    Client: the user of transactions.
                </para>
            </listitem>
            <listitem>
                <para>
                    Service: a transaction-aware service that performs work that may need to be coordinated with other
                    such services
                    elsewhere.
                </para>
            </listitem>
            <listitem>
                <para>
                    Participant: a resource that manages the state changes performed by the service in the context of
                    a transaction. The
                    participant is driven through two-phase commit by the coordinator.
                </para>
            </listitem>
        </itemizedlist>
    </section>
    <section id="_state_transitions">
        <title>State Transitions</title>
        <para>
            A transaction coordinator and two-phase participant go through the state transitions shown:
        </para>
        <figure>
            <title>StateTransitions</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/rts-state_transitions.png" />
                </imageobject>
                <caption>
                    <phrase>StateTransitions image</phrase>
                </caption>
            </mediaobject>
        </figure>
        <para>
            As such, all of the resources in the protocol have statuses that can be represented as one of these
            values. Asking a resource to change its state from, say, Active to Committed, may drive it through all
            of the
            intermediate states and as a result trigger protocol specific events, such as driving the
            two-phase commit
            protocol.
        </para>
    </section>
    <section id="_the_transaction_manager_resource">
        <title>The Transaction Manager Resource</title>
        <para>
            The transaction manager is represented by a URI (referred to as the
            <systemitem>transaction-manager</systemitem>
            URI). It enables clients to create new transaction resources and to query the list of current
            transactions.
            The actual URI depends upon how RESTAT is deployed and will be discussed later.
        </para>
    </section>
</section>
