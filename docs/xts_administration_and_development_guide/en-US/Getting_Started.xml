<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Transactions_XTS_Administration_And_Development_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter>
  
  <title>Getting Started</title>

  <indexterm><primary>user transactions</primary></indexterm>
  <indexterm><primary>business activities</primary></indexterm>
  <indexterm><primary>participants</primary></indexterm>
  <indexterm><primary>com.arjuna.mw.wst11</primary><secondary>XTS API</secondary></indexterm>

  <section>
    <title>Enable XTS on &APPSERVER;</title>
    <para>
      XTS, which is the Web Services component of &PRODUCT;, provides WS-AT and WS-BA support for Web
      Services hosted on the &APPSERVER;. XTS is available as an optional SubSystem, enabled using the standalone-xts.xml configuration.
    </para>

    <procedure id="starting-with-xts">
      <title>Starting &APPSERVER; with XTS Enabled</title>
      <step>
       <para>
           Change to the &APPSERVER; directory:
       </para>
       <para>
           <filename><replaceable>cd $JBOSS_HOME</replaceable></filename>
       </para>
      </step>
      <step>
       <para>
           Copy the example XTS configuration into the configurations directory:
       </para>
       <para>
           <filename><replaceable>cp docs/examples/configs/standalone-xts.xml standalone/configuration</replaceable></filename>
       </para>
      </step>
      <step>
       <para>
         Start &APPSERVER;, specifying the xts configuration:
       </para>
       <para>
         Linux:
       </para>
       <para>
         <filename><replaceable>bin/standalone.sh --server-config=standalone-xts.xml</replaceable></filename>
       </para>
       <para>
         Windows:
       </para>
       <para>
         <filename><replaceable>bin\standalone.bat --server-config=standalone-xts.xml</replaceable></filename>
       </para>
      </step>
    </procedure>
  </section>

  <section>
    <title>Working With WS-AT</title>

    <section id="ref-CreateWSATClient">
      <title>Creating Client Applications</title>

      <para>
        XTS integrates WS-AT transactions with JTA. To invoke a web service inside a WS-AT transaction, simply start a new
        JTA transaction and invoke the web service. By default, XTS will create a WS-AT context and pass it with your
        request. See our quickstarts for an example: <xref linkend="ref-WSATMultiService" /> and
        <xref linkend="ref-WSATMultiHop" />
      </para>
    </section>

    <section id="ref-CreateWSATService">
      <title>Creating Transactional Web Services</title>

      <para>
        Similarly to the client-side, the service-side is also integrated with JTA. To make your web service WS-AT compliant,
        annotate your web service class or method with the EJB 3 javax.ejb.TransactionAttribute annotation or the JTA
        1.2 javax.transaction.Transactional annotation. XTS will automatically translate WS-AT context, received with
        the request, to JTA. See our quickstarts for an example: <xref linkend="ref-WSATMultiService" /> and
        <xref linkend="ref-WSATMultiHop" />
      </para>
    </section>

    <section>
      <title>Using Raw XTS API</title>

      <para>
        Sometimes more control is needed over the client and the server applications. Also JTA transactions are not
        always wanted in the application. In such case it is possible to create client and service applications using
        the Raw XTS API.
      </para>

      <warning>
        <title>Warning!</title>
        <para>
          This is not a recommended way to work with WS-AT. Please take a look at <xref linkend="ref-CreateWSATClient" />
          and <xref linkend="ref-CreateWSATService" /> for the recommended and easier XTS usage for WS-AT applications.
        </para>
      </warning>

      <section>
        <title>Creating Client Applications</title>

        <para>
          There are two aspects to a client application using Raw XTS, the transaction declaration aspects, and the business
          logic. The business logic includes the invocation of Web Services.
        </para>
        <para>
          Transaction declaration aspects are handled automatically with the XTS client API. This API provides simple
          transaction directives such as <methodname>begin</methodname>, <methodname>commit</methodname>, and
          <methodname>rollback</methodname>, which the client application can use to initialize, manage, and terminate
          transactions. Internally, this API uses SOAP to invoke operations on the various WS-C and WS-AT services,
          in order to create a coordinator and drive the transaction to completion.
        </para>

        <section>
          <title>User Transactions</title>

          <para>
            A client uses the <classname>UserTransactionFactory</classname> and <classname>UserTransaction</classname> classes to
            create and manage WS-AT transactions. These classes provide a simple API which operates in a manner similar to the
            JTA API. A WS-AT transaction is started and associated with the client thread by calling the
            <methodname>begin</methodname> method of the <methodname>UserTransaction</methodname> class. The transaction can be
            committed by calling the <methodname>commit</methodname> method, and rolled back by calling the
            <methodname>rollback</methodname> method.
          </para>
          <para>
            More complex transaction management, such as suspension and resumption of transactions, is supported by the
            <classname>TransactionManagerFactory</classname> and <classname>TransactionManager</classname> classes.
          </para>
          <para>
            Full details of the WS-AT APIs are provided in <xref linkend="sec-xts-api" />.
          </para>
        </section>
      </section>

      <section id="ref-WSATRawCreatingTransactionalWebServices">
        <title>Creating Transactional Web Services</title>

        <para>
          The two parts to implementing a Web service using XTS are the transaction management and the business logic.
        </para>
        <para>
          The bulk of the transaction management aspects are organized in a clear and easy-to-implement model by means of
          the XTS’s <firstterm>Participant API</firstterm>, provides a structured model for negotiation between the web
          service and the transaction coordinator. It allows the web service to manage its own local transactional data, in
          accordance with the needs of the business logic, while ensuring that its activities are in step with those of the
          client and other services involved in the transaction. Internally, this API uses SOAP to invokes operations on the
          various WS-C and WS-AT services, to drive the transaction to completion.
        </para>
        <para>
          A <firstterm>participant</firstterm> is a software entity which is driven by the transaction manager on behalf of a
          Web service. When a web service wants to participate in a particular transaction, it must enroll a participant to act
          as a proxy for the service in subsequent negotiations with the coordinator. The participant implements an API
          appropriate to the type of transaction it is enrolled in, and the participant model selected when it is enrolled. For
          example, a Durable2PC participant, as part of a WS-Atomic Transaction, implements the Durable2PCParticipant
          interface.  The use of participants allows the transactional control management aspects of the Web service to be
          factored into the participant implementation, while staying separate from the the rest of the Web service's business
          logic and private transactional data management.
        </para>
        <para>
          The creation of participants is not trivial, since they ultimately reflect the state of a Web service’s back-end
          processing facilities, an aspect normally associated with an enterprise’s own IT infrastructure. Implementations must
          use one of the following interfaces: <interfacename>com.arjuna.wst11.Durable2PCParticipant</interfacename>,
          <interfacename>com.arjuna.wst11.Volatile2PCParticipant</interfacename>.
        </para>
        <para>
          A full description of XTS’s participant features is provided in <xref linkend="sec-xts-api" />.
        </para>
      </section>
    </section>
  </section>

  <section>
    <title>Working With WS-BA</title>

    <section>
      <title>Creating Client Applications</title>

      <para>
        There are two aspects to a client application using XTS, the transaction declaration aspects, and the business
        logic. The business logic includes the invocation of Web Services.
      </para>
      <para>
        Transaction declaration aspects are handled automatically with the XTS client API. This API provides simple
        transaction directives such as <methodname>begin</methodname>, <methodname>close</methodname>, and
        <methodname>cancel</methodname>, which the client application can use to initialize, manage, and terminate
        transactions. Internally, this API uses SOAP to invoke operations on WS-BA services,
        in order to create a coordinator and drive the transaction to completion.
      </para>

      <section>
        <title>Business Activities</title>

        <para>
          A client creates and manages Business Activities using the <classname>UserBusinessActivityFactory</classname> and
          <classname>UserBusinessActivity</classname> classes. A WS-BA activity is started and associated with the client
          thread by calling the <methodname>begin</methodname> method of the <methodname>UserBusinessActivity</methodname>
          class. A client can terminate a business activity by calling the <methodname>close</methodname> method, and cancel it
          by calling the <methodname>cancel</methodname> method.
        </para>
        <para>
          If any of the Web Services invoked by the client register for the
          <systemitem>BusinessActivityWithCoordinatorCompletion</systemitem> protocol, the client can call the
          <methodname>completed</methodname> method before calling the <methodname>close</methodname> method, to notify the
          services that it has finished making service invocations in the current activity.
        </para>
        <para>
          More complex business activity management, such as suspension and resumption of business activities, is supported by
          the <classname>BusinessActivityManagerFactory</classname> and <classname>BusinessActivityManager</classname> classes.
        </para>
        <para>
          Full details of the WS-BA APIs are provided in <xref linkend="sec-xts-api" />.
        </para>
      </section>
    </section>

    <section>
      <title>Creating Transactional Web Services</title>

      <para>
        The theory behind creating WS-BA web services is similar to the WS-AT Raw API
        <xref linkend="ref-WSATRawCreatingTransactionalWebServices" />. However, different participant classes are used:
        <interfacename>com.arjuna.wst11.BusinessAgreementWithParticipantCompletionParticipant</interfacename>, or
        <interfacename>com.arjuna.wst11.BusinessAgreementWithCoordinatorCompletionParticipant</interfacename>.
      </para>
      <para>
        A full description of XTS’s participant features is provided in <xref linkend="sec-xts-api" />.
      </para>
    </section>

    <section>
      <title>New Compensating Transactions API</title>

      <para>
        There is a new Compensating Transactions API available to work with WS-BA applications. Please consult our quickstarts how
        to use it: <xref linkend="ref-CompensationsNonTransactionalResource" /> and
        <xref linkend="ref-CompensationsTravelAgent" />
      </para>
    </section>
  </section>

  <section id="ref-TransactionContextPropagation">
    <title>Configuration of The Transaction Context Propagation</title>

    <para>
      You can enable transaction propagation for all Web service calls that are invoked within a JTA, WS-AT or WS-BA
      transaction. This is done with the 'default-context-propagation' property in the XTS subsystem config of the
      standalone-xts.xml.
    </para>
    <para>
      As this is enabled by default (for standalone-xts.xml), calls to all Web services that support WS-AT or WS-BA
      will automatically receive the transaction context allowing them to participate in the distributed transaction.
    </para>
    <para>
      The transaction context is simply ignored if the service does not support WS-AT or WS-BA. This is done by
      setting MustUnderstand=”false” on the 'CoordinationContext' SOAP header. Unfortunately, this may cause issues
      when invoking WS-AT or WS-BA enabled Web services on other vendors’ application servers. This is because the
      WS-Coordination specification states that MustUnderstand must be set to true. If you are affected by this issue,
      you will need to explicitly enable the transaction propagation for every port.
    </para>
    <para>
      The default context propagation policy can also be overridden on a per Web Service port basis. This allows the
      developer to easily state which Web Service clients must and must-not propagate the transaction context. This is
      done through the standard JAX-WS WebServiceFeature facility. A JAX-WS WebServiceFeature allows meta-information
      to be added to a port that describe cross-cutting behaviour, such as logging, security or compression. In our
      case we use the <xref linkend="ref-JTAOverWSATFeature" /> and <xref linkend="ref-WSTXFeature" /> features.
    </para>
    <para>
      <xref linkend="ref-JTAOverWSATFeature" /> states that any JTA, WS-AT, or WS-BA transactions should be distributed
      via calls on this client. This feature is recommended to use, if you have a JTA transactions which should be
      propagated.
    </para>
    <para>
      <xref linkend="ref-WSTXFeature" /> states that any WS-AT or WS-BA transaction should be distributed via calls on
      this client. You should use this feature, if you use Raw XTS or WS-BA APIs.
    </para>
    <para>
      Calls to the service will fail if the Web service does not support WS-AT or WS-BA (in this case, XTS sets
      MustUnderstand=true on the 'CoordinationContext' SOAP header as the developer has explicitly stated that it is
      required).
    </para>
    <para>
      The developer may also state that the transaction must-not be distributed over calls to this Web service. This
      is done by setting the <xref linkend="ref-JTAOverWSATFeature" /> or <xref linkend="ref-WSTXFeature" /> feature to
      disabled.
    </para>
    <para>
      The use of <xref linkend="ref-JTAOverWSATFeature" /> and <xref linkend="ref-WSTXFeature" /> overrides whatever
      default context propagation is set to in the standalone-xts.xml.
    </para>
  </section>

  <section>
    <title>Summary</title>

    <para>
      This chapter gives a high-level overview of each of the major software pieces used by the Web Services
      transactions component of &PRODUCT;. The Web Services transaction manager provided by &PRODUCT;
      is the hub of the architecture and is the only piece of software that user-level software does
      not bind to directly. XTS provides header-processing infrastructure for use with Web Services transactions
      contexts for both client applications and Web Services. XTS provides a simple interface for developing transaction
      participants, along with the necessary document-handling code.
    </para>
    <para>
      This chapter is only an overview, and does not address the more difficult and subtle aspects of programming Web
      Services. For fuller explanations of the components, please continue reading.
    </para>
  </section>
</chapter>

